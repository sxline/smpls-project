// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadDataServiceClient is the client API for ReadDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadDataServiceClient interface {
	GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataResponse, error)
	GetStatistic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatisticResponse, error)
}

type readDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadDataServiceClient(cc grpc.ClientConnInterface) ReadDataServiceClient {
	return &readDataServiceClient{cc}
}

func (c *readDataServiceClient) GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataResponse, error) {
	out := new(GetAllDataResponse)
	err := c.cc.Invoke(ctx, "/ReadDataService/GetAllData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readDataServiceClient) GetStatistic(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatisticResponse, error) {
	out := new(StatisticResponse)
	err := c.cc.Invoke(ctx, "/ReadDataService/GetStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadDataServiceServer is the server API for ReadDataService service.
// All implementations should embed UnimplementedReadDataServiceServer
// for forward compatibility
type ReadDataServiceServer interface {
	GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataResponse, error)
	GetStatistic(context.Context, *emptypb.Empty) (*StatisticResponse, error)
}

// UnimplementedReadDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedReadDataServiceServer struct {
}

func (UnimplementedReadDataServiceServer) GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedReadDataServiceServer) GetStatistic(context.Context, *emptypb.Empty) (*StatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}

// UnsafeReadDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadDataServiceServer will
// result in compilation errors.
type UnsafeReadDataServiceServer interface {
	mustEmbedUnimplementedReadDataServiceServer()
}

func RegisterReadDataServiceServer(s grpc.ServiceRegistrar, srv ReadDataServiceServer) {
	s.RegisterService(&ReadDataService_ServiceDesc, srv)
}

func _ReadDataService_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadDataServiceServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadDataService/GetAllData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadDataServiceServer).GetAllData(ctx, req.(*GetAllDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadDataService_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadDataServiceServer).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ReadDataService/GetStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadDataServiceServer).GetStatistic(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadDataService_ServiceDesc is the grpc.ServiceDesc for ReadDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReadDataService",
	HandlerType: (*ReadDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllData",
			Handler:    _ReadDataService_GetAllData_Handler,
		},
		{
			MethodName: "GetStatistic",
			Handler:    _ReadDataService_GetStatistic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
